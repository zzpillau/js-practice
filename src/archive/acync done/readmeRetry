// Асинхронные задачи имеют свойство заканчиваться с ошибками. Иногда эти ошибки плавающие и пропадают при повторных выполнениях кода, чем некоторые разработчики активно пользуются. С одной стороны можно вызов повторить самостоятельно, с другой, достаточно написать обобщенную функцию, которая, в случае ошибок, повторяет нужный асинхронный вызов, столько раз, сколько попросят.

// retry.js
// Реализуйте и экспортируйте по умолчанию функцию, которая принимает на вход три аргумента:

// Количество попыток асинхронного вызова в случае ошибок.
// Функция выполняющая асинхронную задачу. Она должна принимать на вход коллбек, который вызывается внутри (так callback(err, body)) и сигнализирует об успешном или ошибочном завершении.
// Коллбек, который будет вызван после того как функция закончит свою работу. Она принимает на вход ошибку и тело ответа.
// Логика работы функции следующая:

// Вызывается функция выполняющая асинхронную операцию. Если она выполнилась успешно, то функция завершает работу вызывая колбек переданный последним параметром.
// Если асинхронная операция закончилась с ошибками, то пробуем запустить еще раз, если общее количество запусков не превысило число, переданное первым параметром. 
// Примеры
// // Пытаемся прочитать файл и даем функции 3 попытки.
retry(3, callback =>
  fs.readFile('file.txt', (err, body) => {
    callback(err, body);
  }), (err, result) => {
    console.log(result);
});
// Подсказки
// Коллбек передаваемый в конце и коллбек который передается в функцию с асинхронной операцией - две разные функции даже не смотря на то, что они принимают одинаковые параметры.
